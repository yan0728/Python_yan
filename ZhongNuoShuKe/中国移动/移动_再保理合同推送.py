
import hashlib
import requests
import json
import time
import random

# 推资产
var_method1 = 'extend.yidong.asset.create'
# 推合同
var_method2 = 'extend.yidong.contract.create'

time = time.strftime("%Y%m%d%H%M%S", time.localtime())
flowNo = 'NO' + time
fileNo = 'FL' + str(random.randint(10000,99999))
# print("业务编号:" + fileNo)

url_server = 'https://test-api-yidong.lianjieabs.com'
url_local = 'http://192.168.31.106:9012'
server = 1 #1:url_server
# def AES():
#     header = {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
#               'User-Agent': 'Apache-HttpClient/4.5.5 (Java/1.8.0_121)', 'Connection': 'keep-alive'}
#     if server == 1:
#         url = url_server + '/asset/yd-asset/aesEncrypt'
#     else:
#         url = url_local + '/asset/yd-asset/aesEncrypt'
#
#     # 推送合同
#     data = 'text={"addr":"/yidong/20210719/153612/test123.pdf",' \
#            '"assets":[],"extension":".zip",' \
#            '"fileName":"test123.pdf","fileNo":"%s",' \
#            '"fileSize":20480,"fileType":"01","loanAmountTotal":null}' % fileNo
#
#     # r = requests.post(url=url, data=json.dumps(data), headers=header)
#     r = requests.post(url=url, data=data.encode("utf-8"), headers=header)
#     print("<<<<<<<AES返回信息>>>>>>>")
#     if r.status_code == 200:
#         print(json.dumps(r.json(), sort_keys=True, indent=2, ensure_ascii=False))
#         a = r.json()
#         return a['data']
#     else:
#         print(r.text)

var_channel = 'test15'
# var_content = AES() #推送合同可以使用
var_content = '9A77769D38977D06A0D8E4EDBDE3D04277498E49D01AA11774F014E89C5309250F6DB4695F1C0E21160327AC292F4B59EE020CB12659205975191A74F1A151B623E8B8919EB26DF32DBB1956826F9267107D2565C7D0BB26B4AFC413D262E5E9AF99457E8E1DA2D156763BC4CF9F02FCE5FC5335BAE545218A8EFAF1B97E15F481BC2EABC0CC80D8F52B3D0EC21DA5F37AA37941AC0B18EFD41C98136286D3AA6E0688A2EE56F429FEAA026C23CC0A9C89BFF7917C0B97F04B829979E62E425DA1BD8C83B3A4CF7B666BB0E0C7A6D8135BE393AC1870D2A96827D8BD470D4A3E7E767C700CE33F8D021C21D94D0CFA47C94652BCF463EDB01A9980ADDE4279AC818E44AB8B6D1D6BA1EC9552C123094631277ACA00856AF3E745EC68FBF261D3F99CC2CA92E2486371CC7A753A6933EB6AECDBE0EBF3D7828CA07D0F0E998A9EC2F7EA186D9488BE8F008FBEA4D48D0390FB783BA75E56BB9EADC1DE4C6A642EAE06C077A938B271C5315E6585738EE72D66ACD9993B87DA0ABC6A3F836D1E65A28E3CEC4ACA48E8E40C5F59A11F0363EF075094D09FE6B479F75163B0B995157563452B83ACEC84AB1383E66D77E6A64DED61D9AEF150A39E82380565E5543175CC919D7537E483E78E81FEF654B11977D8339B47E231E84E764D1AB4D5D737DC76BF596732D52B779527731FFF1274CFEC8D4967B66B2179673CB2F00C2381F75B3DEC2D691D4E3EF417BBAE77484C1563897FE25DE7A133B656C6107BF3BC2D113C1D8CC297515F5EB9A607727262788959FCEFFD03D0FAF2497859740FDF78870A6B45E722C27DC40DEBF717DB12829E6F6A46CB50EDC99432C925E76EE28B7EB46BF08028551823378BC0F3A1EE7A1E42E508BED93300DFDB99328DC984694F925F6981E2BECDB5FFDEDC2B1AD27EF83B2072EDE617BA7E9F6D75381C09CF50383426D9364529839D965804B04C17947E32F71803276896D1F179EDCE8C029824381DFC807E714837D64385D55F2ACE93A80C2FA8B3EDFE1DB4145671F31B9FFA5A62C80BC95461ADB3081425751CBBDC55F36D88B07AAFFC91CEE66886BE98FF389456D34FD95FE584E802EB207F4AB2AC0408BA71DD5FCAE7106BEEFC0D655D52409DEEB32D17F8204181B106EF8A0C513206CE5611A8E2A689BFE0D4CDE4C224F4E0B1A223D012400943FEEDB0FCA23FB128BD7318659860FC6B24D60E146B9D3EDA4F2302D1B0054ED3F65CC1E09E4218E03ACB1B0E64919B6E801AFAA87049712049909C1AAA3664519C797C358495CEF2CF0D8D33B9FB6D7D4C1125C1E0B7022BCCFE49EE6AD6858B072245F664B73C06F774B33C54D0DC37EC012E3FD2D9A7149D52C9A0ED8269E3E4FC9F69DF8E648C6C3C8A1E193721A692471C46276E2B0AC7FD0CD260C2CBF2BA11D5B49E5BB06080499F12187A28E9EAAB387F31442D2BC943F04263642C9CD81586A93A75EA9F1AC026B62868FD54C7B60957802EDF0B46412BB3E5D16E0476D1829037D7CC7C20BFD9C49BC2FD438FFBE9CE3C6DFB0EA0932EEDAF38BA141A01615FEE3E23C6A613CCA4AD0159D5AE3017641088CF70F740557A6D47C96A8D3D97F41FFB1296E5962A77D897513F45361CFD78C83ADA7F45EF41FCD86D89EA1087A6067FFCCD4829519FE2C9965CF1AAC3E766217392B148098552E417E9AC539B77CC198ED2B6AC03A00C3CF4F1A658DF30BFFC2706A21EF1B02E7803FEC86F81D962E20C929E43EFC769918E92936ECE05D9243739E0660E371EDBFB343A3E57A8F2773B69562D7C9E25E4688AC97BD4D27276A25D700E3E59A93038E833DAB6834F9EBC0B2DF1165834925F9348A1D36377654A1E929BE75F188FE2AF66FDB9F8F971D91B50E28965DE7A0981FABEFDEF2211F74478E1E9DE894E6B80116F8F1665440F668CA2125B6FA0F84FC63A5CBF9CC0BB98DA82761C4A6DDC5E4AD11DE841C3736119238297D74D63526BE35930B612D8A287A9076E3D7A86B16B4615B9B4ABE3E37EC18BCDA5C1DE48E788D8693941368E005A82848F3ED6E337E89C4782594090A0A2EF348528EEF166E0AFBBC6819766B725BD761E9F70F3F7F14E3F9ECD2CB8C5ADD2689A07E8EA9D174999B5DFE02E6ABC28A8B29D9E8E49377A09D14C91DD7502C9329F4B1761C27A'
var_flowNo = flowNo
var_method = var_method1
var_time = time
var_version = '1.0.2'

def pinChuan():
      chuan = ('IUY9JiCa35ktBHKrJaS3s+Q49GRXtbaW'
            'channel{}'
            'content{}'
            'flowNo{}'
            'method{}'
            'time{}'
            'version{}'
            'IUY9JiCa35ktBHKrJaS3s+Q49GRXtbaW'.format(var_channel,var_content,var_flowNo,var_method,var_time,var_version))
      # print("拼串:" + chuan)
      return chuan

def AddMD5():
      # str = pinChuan()
      str = '500595'
      # 创建md5对象
      m = hashlib.md5()

      # Tips
      # 此处必须encode
      # 若写法为m.update(str)  报错为： Unicode-objects must be encoded before hashing
      # 因为python3里默认的str是unicode
      # 或者 b = bytes(str, encoding='utf-8')，作用相同，都是encode为bytes
      b = str.encode(encoding='utf-8')
      m.update(b)
      str_md5 = m.hexdigest()

      # print('MD5加密前为 ：' + str)
      # print('MD5加密后为小写 ：' + str_md5)

      # 另一种写法：b‘’前缀代表的就是bytes
      # str_md5 = hashlib.md5(b str).hexdigest()
      print('MD5加密后为大写 ：' + str_md5.upper())
      # return str_md5.upper()
AddMD5()

def requestData():
      header = {'Content-Type':'application/json;charset=UTF-8',
                'User-Agent': 'Apache-HttpClient/4.5.5 (Java/1.8.0_121)','Connection':'keep-alive'}

      if server == 1:
          url = url_server + '/external/resources'
      else:
          url = url_local + '/external/resources'

      data = {
          "flowNo": var_flowNo,
          "content": var_content,
          "time": var_time,
          "method": var_method,
          "channel": var_channel,
          "version": var_version,
          "sign": AddMD5()
      }

      r = requests.post(url=url,data=json.dumps(data) ,headers=header)
      # 打印的返回值是json格式
      print("<<<<<<<推送返回信息>>>>>>>")
      print(json.dumps(r.json(),sort_keys=True, indent=2,ensure_ascii = False))
      print(url)
# requestData()